// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: query.sql

package db

import (
	"context"
	"time"

	"encore.dev/types/uuid"
)

const create = `-- name: Create :one
INSERT INTO notes (note_front, note_back, easiness_factor, repetition_number, interval, next_review)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, easiness_factor, repetition_number, interval, note_front, note_back, next_review, is_learning
`

type CreateParams struct {
	NoteFront        string
	NoteBack         string
	EasinessFactor   float64
	RepetitionNumber int32
	Interval         int32
	NextReview       time.Time
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (Note, error) {
	row := q.db.QueryRowContext(ctx, create,
		arg.NoteFront,
		arg.NoteBack,
		arg.EasinessFactor,
		arg.RepetitionNumber,
		arg.Interval,
		arg.NextReview,
	)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.EasinessFactor,
		&i.RepetitionNumber,
		&i.Interval,
		&i.NoteFront,
		&i.NoteBack,
		&i.NextReview,
		&i.IsLearning,
	)
	return i, err
}

const get = `-- name: Get :one
SELECT id, easiness_factor, repetition_number, interval, note_front, note_back, next_review, is_learning
FROM notes
WHERE id = $1
`

func (q *Queries) Get(ctx context.Context, id uuid.UUID) (Note, error) {
	row := q.db.QueryRowContext(ctx, get, id)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.EasinessFactor,
		&i.RepetitionNumber,
		&i.Interval,
		&i.NoteFront,
		&i.NoteBack,
		&i.NextReview,
		&i.IsLearning,
	)
	return i, err
}

const listAll = `-- name: ListAll :many
SELECT id, easiness_factor, repetition_number, interval, note_front, note_back, next_review, is_learning
FROM notes
`

func (q *Queries) ListAll(ctx context.Context) ([]Note, error) {
	rows, err := q.db.QueryContext(ctx, listAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Note{}
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.EasinessFactor,
			&i.RepetitionNumber,
			&i.Interval,
			&i.NoteFront,
			&i.NoteBack,
			&i.NextReview,
			&i.IsLearning,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDue = `-- name: ListDue :many

SELECT id, easiness_factor, repetition_number, interval, note_front, note_back, next_review, is_learning
FROM notes
WHERE next_review < NOW()
`

//
func (q *Queries) ListDue(ctx context.Context) ([]Note, error) {
	rows, err := q.db.QueryContext(ctx, listDue)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Note{}
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.EasinessFactor,
			&i.RepetitionNumber,
			&i.Interval,
			&i.NoteFront,
			&i.NoteBack,
			&i.NextReview,
			&i.IsLearning,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReviewStatus = `-- name: UpdateReviewStatus :exec
UPDATE notes
SET easiness_factor   = $2,
    repetition_number = $3,
    interval          = $4,
    next_review       = $5
WHERE id = $1
`

type UpdateReviewStatusParams struct {
	ID               uuid.UUID
	EasinessFactor   float64
	RepetitionNumber int32
	Interval         int32
	NextReview       time.Time
}

func (q *Queries) UpdateReviewStatus(ctx context.Context, arg UpdateReviewStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateReviewStatus,
		arg.ID,
		arg.EasinessFactor,
		arg.RepetitionNumber,
		arg.Interval,
		arg.NextReview,
	)
	return err
}
